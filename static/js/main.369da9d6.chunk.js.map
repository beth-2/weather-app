{"version":3,"sources":["axios/CityAxios.js","context/GeoContext.js","axios/LatLonAxios.js","date/DateBuilder.js","style/globalStyles.js","App.js","index.js"],"names":["api","CityAxios","useState","query","setQuery","cityW","setCityW","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","GeoContext","createContext","GeoContextProvider","props","usePosition","latitude","longitude","Provider","children","LatLonAxios","setWeather","useContext","weatherApi","lat","lon","a","process","axios","get","response","data","alert","useEffect","DateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","GlobalStyle","createGlobalStyle","App","ReactDOM","render","document","querySelector"],"mappings":"oKAEMA,EACI,0CADJA,EAEI,mCAkCKC,EA/BG,WAAO,IAAD,EACMC,mBAAS,IADf,mBACdC,EADc,KACPC,EADO,OAEMF,mBAAS,IAFf,mBAEdG,EAFc,KAEPC,EAFO,KAmBtB,OACE,gCACE,uBACAC,SAAU,SAAAC,GAAC,OAAIJ,EAASI,EAAEC,OAAOC,QACjCA,MAAOP,EACPQ,WAlBW,SAAAC,GACE,UAAZA,EAAIC,KACLC,MAAM,GAAD,OAAId,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDe,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAAAG,GACAd,EAAS,IACTE,EAASY,GACTC,QAAQC,IAAR,SAAsBF,SAYxB,4BAAIb,EAAMgB,W,iDC9BHC,EAAaC,0BAEbC,EAAqB,SAACC,GAAW,IAAD,EACXC,wBAAxBC,EADmC,EACnCA,SAAUC,EADyB,EACzBA,UAClB,OACE,cAACN,EAAWO,SAAZ,CAAqBnB,MAAQ,CAACiB,WAAUC,aAAxC,SACGH,EAAMK,YCmBEC,EAxBK,WAAO,IAAD,EACM7B,mBAAS,IADf,mBACR8B,GADQ,aAEQC,qBAAWX,GAAnCK,EAFgB,EAEhBA,SAAUC,EAFM,EAENA,UAEZM,EAAU,uCAAG,WAAOC,EAAKC,GAAZ,eAAAC,EAAA,4DACLC,mCADK,kBAGQC,IAAMC,IAAN,8DACkCL,EADlC,gBAC6CC,EAD7C,kBAFbE,qCADK,OAGTG,EAHS,OAMftB,QAAQC,IAAR,WAAwBqB,EAASC,MACjCV,EAAWS,EAASC,MAPL,gDASfC,MAAM,EAAD,IATU,yDAAH,wDAiBhB,OAJAC,qBAAU,WACRjB,GAAYC,GAAaM,EAAWN,EAAWA,KAC9C,CAACD,EAAUC,IAEP,yBCDMiB,EAtBK,WAelB,OACE,8BACE,8BAfgB,SAACC,GACnB,IAIIC,EAFO,CAAE,SAAU,UAAW,YAAa,WAAY,SAAU,UAEtDD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANS,CAAE,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OACvE,SAAU,YAAa,UAAW,WAAY,YAK3BL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAK1BE,CAAY,IAAIC,W,gBCZbC,EALKC,YAAH,6ECkBFC,EAbH,WACV,OACE,gCACE,cAAC,EAAD,UACE,cAAC,EAAD,MAED,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCXPC,IAASC,OAAO,cAAC,EAAD,IAAOC,SAASC,cAAc,Y","file":"static/js/main.369da9d6.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst api = {\r\n    base: 'http://api.openweathermap.org/data/2.5/',\r\n    key:  '33951dec42b4a4f440403c96a0228ab2'\r\n  }\r\n\r\nconst CityAxios = () => {\r\n  const [ query, setQuery ] = useState('');\r\n  const [ cityW, setCityW ] = useState('');\r\n\r\n \r\n\r\n  const search = evt => {\r\n    if(evt.key === 'Enter'){\r\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n      .then(res => res.json())\r\n      .then(\r\n        result =>{\r\n        setQuery(''); \r\n        setCityW(result);\r\n        console.log(`result`, result)\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n      onChange={e => setQuery(e.target.value)}\r\n      value={query}\r\n      onKeyPress={search}\r\n      />\r\n      <p>{cityW.name}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CityAxios;","import { usePosition } from 'use-position';\r\nimport React, { createContext } from \"react\";\r\n\r\nexport const GeoContext = createContext();\r\n\r\nexport const GeoContextProvider = (props) => {\r\n  const { latitude, longitude } = usePosition();\r\n  return (\r\n    <GeoContext.Provider value={ {latitude, longitude} }>\r\n      {props.children}\r\n    </GeoContext.Provider>\r\n  );\r\n};","import React, { useEffect, useState, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport { GeoContext } from \"../context/GeoContext\";\r\n\r\nconst LatLonAxios = () => {\r\n  const [weather, setWeather] = useState('');\r\n  const { latitude, longitude } = useContext(GeoContext);\r\n\r\n  const weatherApi = async (lat, lon) => {\r\n    const key = process.env.REACT_APP_LON_LAT_API_KEY;\r\n    try {\r\n      const response = await axios.get(\r\n        `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${key}`\r\n      );\r\n      console.log(`response`, response.data);\r\n      setWeather(response.data);\r\n    } catch(err) {\r\n      alert(err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    latitude && longitude && weatherApi(longitude, longitude);\r\n  }, [latitude, longitude]);\r\n\r\n  return <div></div>;\r\n};\r\n\r\nexport default LatLonAxios;","import React from 'react'\r\n\r\nconst DateBuilder = () => {\r\n\r\n  const dateBuilder = (d) => {\r\n    let months = [ 'January', 'February', 'March', 'April', 'May', 'June', 'July',\r\n    'August', 'September', 'October', 'November', 'December' ]\r\n    let days = [ 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Sunday' ]\r\n\r\n    let day = days[d.getDay()]\r\n    let date = d.getDate()\r\n    let month = months[d.getMonth()]\r\n    let year = d.getFullYear()\r\n\r\n    return `${day} ${date} ${month} ${year}`\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>{dateBuilder(new Date())}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DateBuilder\r\n","import { createGlobalStyle } from 'styled-components';\r\n \r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    background-color: #797979;\r\n  }\r\n  `;\r\nexport default GlobalStyle;","import React from 'react'\r\nimport CityAxios from './axios/CityAxios'\r\nimport LatLonAxios from './axios/LatLonAxios'\r\nimport { GeoContextProvider } from './context/GeoContext'\r\nimport DateBuilder from './date/DateBuilder'\r\nimport GlobalStyle from './style/globalStyles'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <GeoContextProvider>\r\n        <LatLonAxios/>\r\n      </GeoContextProvider>\r\n       <DateBuilder/>\r\n       <CityAxios/>\r\n       <GlobalStyle/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App/>,document.querySelector('#root'))"],"sourceRoot":""}